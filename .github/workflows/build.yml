name: 'Build and Release'

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: ${{ github.ref_name }}
          releaseName: 'One Thing Focus v${{ github.ref_name }}'
          releaseBody: 'Veja as mudanÃ§as nesta release no CHANGELOG.md'
          releaseDraft: true
          prerelease: false
          includeDebug: false

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Publish release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const tag = context.ref.replace('refs/tags/', '');
            
            // Busca a release draft criada pelo build
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
            });
            
            const draftRelease = releases.data.find(
              release => release.tag_name === tag && release.draft === true
            );
            
            if (draftRelease) {
              // Publica a release
              await github.rest.repos.updateRelease({
                owner,
                repo,
                release_id: draftRelease.id,
                draft: false,
              });
              console.log(`Release ${tag} publicada com sucesso!`);
            }